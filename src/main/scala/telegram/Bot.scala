package telegram

import dao.{Location, Locations, MysqlUtils}
import info.mukel.telegrambot4s.api.declarative.{Commands, InlineQueries}
import info.mukel.telegrambot4s.api.{Extractors, Polling, TelegramBot}
import info.mukel.telegrambot4s.methods.{SendLocation, SendMessage}
import info.mukel.telegrambot4s.models.Message
import model.Shows
import org.joda.time.{DateTime, DateTimeZone, Instant}
import web.{Holder, WebServer}

import scala.concurrent.Future
import scala.concurrent.duration._
import scala.util.Try
import cats.data.OptionT
import cats.implicits._
import telegram.Bot.reply

object Main extends App {
  override def main(args: Array[String]): Unit = {
    WebServer.init()
    Bot.run()
  }
}

object Bot extends TelegramBot with Polling with Commands with InlineQueries {
  implicit val akkaSystem = Holder.system

  akkaSystem.scheduler.schedule(20 minutes, 20 minutes, () => {
    val now = new DateTime(DateTimeZone.forID("Europe/Moscow"))
    val hour = now.getHourOfDay
    if (hour >= 5 && hour <= 22) {
      checkUsers()
    }
  })

  lazy val token: String = scala.io.Source.fromFile("tg.token").getLines.toList.head.trim

  onCommand("/help", "/?", "/start") { implicit msg =>
    val help =
      """
        | –ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–∞–¥–∫–æ–≤ –Ω–∞ 2 —á–∞—Å–∞ —Å —à–∞–≥–æ–º –≤ 10 –º–∏–Ω—É—Ç.
        |
        | –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        | /legend                      - –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
        | /help, /?                    - –¥–∞–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
        | –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ-—Ç–æ—á–∫—É          - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
        | /checkAll                    - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º
        | /showAll                     - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –≥–µ–æ-—Ç–æ—á–∫–∞–º
        | /show [–Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏]          - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–µ–æ-—Ç–æ—á–∫–µ
        | /rename [–Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏] [–∏–º—è]  - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–µ–æ-—Ç–æ—á–∫–µ
        | /delete [–Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏]        - —É–¥–∞–ª–∏—Ç—å –≥–µ–æ-—Ç–æ—á–∫—É
        | [–Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏]                - —Ç–æ–∂–µ —á—Ç–æ –∏ /show [–Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏]
      """.stripMargin
    reply(help)
  }

  onCommand("/checkAll") { implicit msg =>
    checkUser(msg.from.get.id)
  }

  onCommand("/legend") { implicit msg =>
    reply(
      """
        | –û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:
        | üå¶Ô∏è - —Å–ª–∞–±—ã–π –¥–æ–∂–¥—å
        | üåß - –¥–æ–∂–¥—å
        | ‚õà - —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
        | ‚ö° - —Å–∏–ª—å–Ω–µ–µ –Ω–µ–∫—É–¥–∞
        | ‚òÅ - –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ (<2 –∫–º) –∏–¥–µ—Ç –¥–æ–∂–¥—å
        | ‚ùî- –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 2-5 –∫–º –∏–¥–µ—Ç –¥–æ–∂–¥—å
        | ‚õÖ - –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 5-10 –∫–º –∏–¥–µ—Ç –¥–æ–∂–¥—å
        | üå§ - –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 10-50 –∫–º –∏–¥–µ—Ç –¥–æ–∂–¥—å
        | ‚òÄ - –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 50 –∫–º –Ω–∏–≥–¥–µ –Ω–µ—Ç –æ—Å–∞–¥–∫–æ–≤
        | ‚ùÑ - —Å–Ω–µ–≥
        |
        | –ù–∞–ø—Ä–∏–º–µ—Ä,
        | üå¶Ô∏è üå¶Ô∏è üåß üåß üå¶Ô∏è üå¶Ô∏è ‚òÅÔ∏è ‚ùî üå§ üå§ üå§ ‚òÄ ‚òÄ ‚òÄ
        | –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–≤—ã–π —á–∞—Å –≤ —Ç–æ—á–∫–µ –∏–¥–µ—Ç –¥–æ–∂–¥—å (–ø–µ—Ä–≤—ã–µ 6 –∏–∫–æ–Ω–æ–∫), –∑–∞—Ç–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Å–∞–¥–∫–æ–≤ —á–µ—Ä–µ–∑ —á–∞—Å. –ö–∞–∂–¥–∞—è –∏–∫–æ–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 10 –º–∏–Ω—É—Ç.
      """.stripMargin)
  }

  onCommand("/delete") { implicit msg =>
    withArgs {
      case Seq(Extractors.Int(index)) if index > 0 =>
        for {
          _ <- MysqlUtils.db.run(Locations.deleteByUserIdAndIndex(msg.from.get.id, index))
          _ <- reply(s"–¢–æ—á–∫–∞ ${index} —É–¥–∞–ª–µ–Ω–∞")
        } yield ()
      case _ =>
        reply("/delete [–Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏], –Ω–∞–ø—Ä–∏–º–µ—Ä /delete 1")
    }
  }

  onCommand("/showAll") { implicit msg =>
    for {
      active <- MysqlUtils.db.run(Locations.getByUserId(msg.from.get.id))
      _ <- Future.traverse(active)(location => reply(s"""${location.index}: ${location.name}"""))
    } yield ()
  }

  def show(index: Int)(implicit msg: Message): OptionT[Future, Unit] = {
    for {
      userId <- OptionT.fromOption[Future](msg.from)
      locations: Seq[Location] <- OptionT.liftF(MysqlUtils.db.run(Locations.getByUserIdAndIndex(userId.id, index)))
      _ <- locations.headOption match {
        case None => OptionT.liftF(reply(s"–ù–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–æ—á–∫–∞ ${index}"))
        case Some(location) => OptionT.liftF(show(location))
      }
    } yield ()
  }

  def show(location: Location)(implicit msg: Message): Future[Unit] = {
    for {
      _ <- reply(s"""${location.index}: ${location.name}""")
      _ <- request(SendLocation(location.chatId, location.latitude, location.longitude))
      forecast <- WebServer.getData(location.longitude, location.latitude)
      _ <- reply(Shows.showSimpleTimeLineForecase.show(forecast))
    } yield ()
  }

  onCommand("/show") {
    implicit msg =>
      withArgs {
        case Seq(Extractors.Int(index)) if index > 0 =>
          show(index)
        case _ =>
          reply("/show [–Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏], –Ω–∞–ø—Ä–∏–º–µ—Ä /show 1")
      }
  }

  onCommand("/rename") { implicit msg =>
    withArgs { args => {
      if (args.size > 1 && Try {
        args.head.toInt
      }.isSuccess && args.head.toInt > 0) {
        val index = args.head.toInt
        for {
          locations <- OptionT.liftF(MysqlUtils.db.run(Locations.getByUserIdAndIndex(msg.from.get.id, index)))
          location <- OptionT.fromOption[Future](locations.headOption)
          _ <- OptionT.liftF(MysqlUtils.db.run(Locations.insert(location.copy(name = args.drop(1).mkString(" ").take(64)))))
          _ <- OptionT.liftF(reply("–¢–æ—á–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞"))
        } yield ()
      }
      else {
        reply("/rename [–Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏] [–Ω–∞–∑–≤–∞–Ω–∏–µ], –Ω–∞–ø—Ä–∏–º–µ—Ä /rename 1 –¥–æ–º")
      }
    }
    }
  }

  def getIdx(msg: Message): Option[Int] = {
    msg.text.map(x => {
      val i: Int = Try {
        x.toInt
      }.getOrElse(-1)
      i
    })
  }

  onMessage {
    implicit msg => {
      if (msg.location.isDefined) {
        msg.location.foreach(location => {
          for {
            byUser: Seq[Location] <- MysqlUtils.db.run(Locations.getByUserId(msg.from.get.id))
            indices: Set[Int] = byUser.map(x => x.index).toSet
            minIndex = ((1 to 5).toSet -- indices).minBy(identity)
            forecast <- WebServer.getData(location.longitude, location.latitude)
            _ <- reply(Shows.showSimpleTimeLineForecase.show(forecast))
            name = "some name"
            insert = Locations.insert(Location(None, msg.from.get.id, msg.chat.id, location.longitude, location.latitude, true, "", name, new Instant(), minIndex))
            _ <- MysqlUtils.db.run(insert)
            _ <- reply(s"–î–æ–±–∞–≤–∏–ª —Ç–æ—á–∫—É $minIndex $name. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /rename ${minIndex} [–Ω–æ–≤–æ–µ_–∏–º—è]")
          } yield ()
        })
      } else if (getIdx(msg).getOrElse(-1) >= 1) {
        show(getIdx(msg).get)
      }

      logger.info(msg.toString)
    }
  }

  def checkUser(userId: Int)(implicit msg: Message): Future[Unit] = {
    for {
      active: Seq[Location] <- MysqlUtils.db.run(Locations.getByUserId(userId))
      forecasts <- Future.traverse(active)(location => WebServer.getData(location.longitude, location.latitude).map(x => (x, location)))
      shows = forecasts.map(x => (Shows.showSimpleTimeLineForecase.show(x._1), x._2))
      results = shows.map { case (show, location) =>
        s"""${location.index}: ${location.name}
           | $show
          """.stripMargin
      }
      _ <- Future.traverse(results)(x => reply(x))
    } yield ()
  }

  def checkUsers(): Future[Unit] = {
    for {
      active: Seq[Location] <- MysqlUtils.db.run(Locations.findActive())
      _ <- Future.traverse(active)(location => {
        WebServer.getData(location.longitude, location.latitude).flatMap(forecast => {
          if (forecast.values.toList.exists(x => x.inside.isDefined)) {
            val show = Shows.showSimpleTimeLineForecase.show(forecast)
            val result =
              s"""–í —Ç–æ—á–∫–µ ${location.index}: ${location.name} –æ–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏.
                 |$show
               """.stripMargin
            request(SendMessage(location.chatId, result))
          } else {
            Future.successful()
          }
        })
      })
    } yield ()
  }
}
