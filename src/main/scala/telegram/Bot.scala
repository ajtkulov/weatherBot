package telegram

import dao.{Location, Locations, MysqlUtils}
import info.mukel.telegrambot4s.api.declarative.{Commands, InlineQueries}
import info.mukel.telegrambot4s.api.{Polling, TelegramBot}
import info.mukel.telegrambot4s.methods.{SendLocation, SendMessage}
import info.mukel.telegrambot4s.models.{ChatId, Message}
import model.{Coor, Forecast, Shows}
import model.Forecast.SimpleTimeLineForecast
import org.joda.time.Instant
import web.{Holder, WebServer}

import scala.concurrent.Future

object Main extends App {
  override def main(args: Array[String]): Unit = {
    Bot.run()
  }
}

object Bot extends TelegramBot with Polling with Commands with InlineQueries {
  implicit val akkaSystem = Holder.system

  lazy val token: String = scala.io.Source.fromFile("tg.token").getLines.toList.head.trim

  onCommand("/test") { implicit msg =>
    println(msg)
    reply("My token is SAFE!")
  }

  onCommand("/help", "/?") { implicit msg =>
    val help =
      """
        | –ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–∞–¥–∫–æ–≤ –Ω–∞ 2 —á–∞—Å–∞ —Å —à–∞–≥–æ–º –≤ 10 –º–∏–Ω—É—Ç.
        |
        | –û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:
        | üå¶Ô∏è - —Å–ª–∞–±—ã–π –¥–æ–∂–¥—å
        | üåß - –¥–æ–∂–¥—å
        | ‚õà - —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
        | ‚ö° - —Å–∏–ª—å–Ω–µ–µ –Ω–µ–∫—É–¥–∞
        | ‚òÅ - –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ (<2 –∫–º) –∏–¥–µ—Ç –¥–æ–∂–¥—å
        | ‚ùî- –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 2-5 –∫–º –∏–¥–µ—Ç –¥–æ–∂–¥—å
        | ‚õÖ - –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 5-10 –∫–º –∏–¥–µ—Ç –¥–æ–∂–¥—å
        | üå§ - –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 10-50 –∫–º –∏–¥–µ—Ç –¥–æ–∂–¥—å
        | ‚òÄ - –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 50 –∫–º –Ω–∏–≥–¥–µ –Ω–µ—Ç –æ—Å–∞–¥–∫–æ–≤
        | ‚ùÑ - —Å–Ω–µ–≥
        |
        | –ù–∞–ø—Ä–∏–º–µ—Ä,
        | üå¶Ô∏è üå¶Ô∏è üåß üåß üå¶Ô∏è üå¶Ô∏è ‚òÅÔ∏è ‚ùî üå§ üå§ üå§ ‚òÄ ‚òÄ ‚òÄ
        | –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–≤—ã–π —á–∞—Å –≤ —Ç–æ—á–∫–µ –∏–¥–µ—Ç –¥–æ–∂–¥—å (–ø–µ—Ä–≤—ã–µ 6 –∏–∫–æ–Ω–æ–∫), –∑–∞—Ç–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Å–∞–¥–∫–æ–≤ —á–µ—Ä–µ–∑ —á–∞—Å.
        |
        | –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        | /help, /? - –¥–∞–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
        | –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ-—Ç–æ—á–∫—É - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
        | /checkAll - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º
        | /showAll  - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –≥–µ–æ-—Ç–æ—á–∫–∞–º
      """.stripMargin
    reply(help)
  }

  onCommand("/checkAll") { implicit msg =>
    checkUser(msg.from.get.id)
  }

  onCommand("/showAll") { implicit msg =>
    for {
      active <- MysqlUtils.db.run(Locations.getByUserId(msg.from.get.id))
      _ = active.foreach {
        location => {
          for {
            _ <- reply(s"""${location.index}: ${location.name}""")
            _ <- request (SendLocation(location.chatId, location.latitude, location.longitude))
          } yield ()
        }
      }

    } yield ()
  }

  onMessage {
    implicit msg =>
      if (msg.location.isDefined) {

        msg.location.foreach(location => {
          for {
            byUser: Seq[Location] <- MysqlUtils.db.run(Locations.getByUserId(msg.from.get.id))
            indecies: Set[Int] = byUser.map(x => x.index).toSet
            minIndex = ((1 to 5).toSet -- indecies).minBy(identity)
            forecast <- WebServer.getData(location.longitude, location.latitude)
            _ <- reply(Shows.showSimpleTimeLineForecase.show(forecast))
            insert = Locations.insert(Location(None, msg.from.get.id, msg.chat.id, location.longitude, location.latitude, true, "", "some name", new Instant(), minIndex))
            _ <- MysqlUtils.db.run(insert)
          } yield ()
        })

        logger.info(msg.toString)
      }
  }

  def checkUser(userId: Int)(implicit msg: Message): Future[Unit] = {
    for {
      active: Seq[Location] <- MysqlUtils.db.run(Locations.getByUserId(userId))
      _ = active.foreach(location => {
        WebServer.getData(location.longitude, location.latitude).foreach(forecast => {
          val show = Shows.showSimpleTimeLineForecase.show(forecast)
          val result =
            s"""${location.index}: ${location.name}
               |$show
          """.stripMargin
          reply(result)
        })
      })
    } yield ()
  }
}
